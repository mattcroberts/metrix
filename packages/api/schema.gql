# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Analysis {
  id: ID!
  name: String!
  chartType: [ChartType!]!
  metrics: [Metric!]!
}

enum ChartType {
  MARKER
  LINE
}

type DataPoint implements IDataPoint {
  id: ID!
  metric: Metric!
  datetime: DateTime!
}

input DataPointInput {
  rating: Float
}

union DataPointUnion = DataPoint | RatingDataPoint

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DeviceRegistration {
  id: String!
  user: User!
  token: String!
}

interface IDataPoint {
  id: ID!
  metric: Metric!
  datetime: DateTime!
}

type Metric {
  id: ID!
  name: String!
  datetime: DateTime!
  dataPoints: [DataPointUnion!]!
  type: MetricType!
  analyses: [Analysis!]!
  reminder: Boolean!
  reminderUnit: ReminderUnit
  reminderValue: Float
}

input MetricInput {
  name: String!
  reminder: Boolean!
  reminderUnit: ReminderUnit
  reminderValue: Float
}

enum MetricType {
  DataPoint
  RatingDataPoint
}

type Mutation {
  createAnalysis(metricIds: [ID!]!, name: String!): Analysis!
  recordDataPoint(data: DataPointInput, metricId: String!): Metric!
  createMetric(type: String, name: String!): Metric!
  updateMetric(metricInput: MetricInput!, id: String!): Metric!
  deleteMetric(id: String!): Metric
}

type Query {
  allAnalyses: [Analysis!]!
  getAnalysisWithData(id: String!): Analysis!
  allMetrics: [Metric!]!
  metricById(id: String!): Metric!
  devices: [DeviceRegistration!]!
}

type RatingDataPoint implements IDataPoint {
  id: ID!
  metric: Metric!
  datetime: DateTime!
  rating: Float!
}

enum ReminderUnit {
  Day
  Hour
  Minute
}

type User {
  """
  The `ID` scalar type represents a unique identifier, often used to refetch an
  object or as key for a cache. The ID type appears in a JSON response as a
  String; however, it is not intended to be human-readable. When expected as an
  input type, any string (such as `"4"`) or integer (such as `4`) input value
  will be accepted as an ID.
  """
  ID: String!
  firstName: String!
  lastName: String!
  email: String!
  devices: [DeviceRegistration!]!
}
