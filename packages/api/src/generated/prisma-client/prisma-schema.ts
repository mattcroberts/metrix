// Code generated by Prisma (prisma@1.34.5). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateDataPoint {
  count: Int!
}

type AggregateMetric {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type DataPoint {
  id: ID!
  dateTime: DateTime
  metric: Metric!
}

type DataPointConnection {
  pageInfo: PageInfo!
  edges: [DataPointEdge]!
  aggregate: AggregateDataPoint!
}

input DataPointCreateInput {
  id: ID
  dateTime: DateTime
  metric: MetricCreateOneWithoutDataPointsInput!
}

input DataPointCreateManyWithoutMetricInput {
  create: [DataPointCreateWithoutMetricInput!]
  connect: [DataPointWhereUniqueInput!]
}

input DataPointCreateWithoutMetricInput {
  id: ID
  dateTime: DateTime
}

type DataPointEdge {
  node: DataPoint!
  cursor: String!
}

enum DataPointOrderByInput {
  id_ASC
  id_DESC
  dateTime_ASC
  dateTime_DESC
}

type DataPointPreviousValues {
  id: ID!
  dateTime: DateTime
}

input DataPointScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  dateTime: DateTime
  dateTime_not: DateTime
  dateTime_in: [DateTime!]
  dateTime_not_in: [DateTime!]
  dateTime_lt: DateTime
  dateTime_lte: DateTime
  dateTime_gt: DateTime
  dateTime_gte: DateTime
  AND: [DataPointScalarWhereInput!]
  OR: [DataPointScalarWhereInput!]
  NOT: [DataPointScalarWhereInput!]
}

type DataPointSubscriptionPayload {
  mutation: MutationType!
  node: DataPoint
  updatedFields: [String!]
  previousValues: DataPointPreviousValues
}

input DataPointSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DataPointWhereInput
  AND: [DataPointSubscriptionWhereInput!]
  OR: [DataPointSubscriptionWhereInput!]
  NOT: [DataPointSubscriptionWhereInput!]
}

input DataPointUpdateInput {
  dateTime: DateTime
  metric: MetricUpdateOneRequiredWithoutDataPointsInput
}

input DataPointUpdateManyDataInput {
  dateTime: DateTime
}

input DataPointUpdateManyMutationInput {
  dateTime: DateTime
}

input DataPointUpdateManyWithoutMetricInput {
  create: [DataPointCreateWithoutMetricInput!]
  delete: [DataPointWhereUniqueInput!]
  connect: [DataPointWhereUniqueInput!]
  set: [DataPointWhereUniqueInput!]
  disconnect: [DataPointWhereUniqueInput!]
  update: [DataPointUpdateWithWhereUniqueWithoutMetricInput!]
  upsert: [DataPointUpsertWithWhereUniqueWithoutMetricInput!]
  deleteMany: [DataPointScalarWhereInput!]
  updateMany: [DataPointUpdateManyWithWhereNestedInput!]
}

input DataPointUpdateManyWithWhereNestedInput {
  where: DataPointScalarWhereInput!
  data: DataPointUpdateManyDataInput!
}

input DataPointUpdateWithoutMetricDataInput {
  dateTime: DateTime
}

input DataPointUpdateWithWhereUniqueWithoutMetricInput {
  where: DataPointWhereUniqueInput!
  data: DataPointUpdateWithoutMetricDataInput!
}

input DataPointUpsertWithWhereUniqueWithoutMetricInput {
  where: DataPointWhereUniqueInput!
  update: DataPointUpdateWithoutMetricDataInput!
  create: DataPointCreateWithoutMetricInput!
}

input DataPointWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  dateTime: DateTime
  dateTime_not: DateTime
  dateTime_in: [DateTime!]
  dateTime_not_in: [DateTime!]
  dateTime_lt: DateTime
  dateTime_lte: DateTime
  dateTime_gt: DateTime
  dateTime_gte: DateTime
  metric: MetricWhereInput
  AND: [DataPointWhereInput!]
  OR: [DataPointWhereInput!]
  NOT: [DataPointWhereInput!]
}

input DataPointWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Metric {
  id: ID!
  name: String!
  dataPoints(where: DataPointWhereInput, orderBy: DataPointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DataPoint!]
}

type MetricConnection {
  pageInfo: PageInfo!
  edges: [MetricEdge]!
  aggregate: AggregateMetric!
}

input MetricCreateInput {
  id: ID
  name: String!
  dataPoints: DataPointCreateManyWithoutMetricInput
}

input MetricCreateOneWithoutDataPointsInput {
  create: MetricCreateWithoutDataPointsInput
  connect: MetricWhereUniqueInput
}

input MetricCreateWithoutDataPointsInput {
  id: ID
  name: String!
}

type MetricEdge {
  node: Metric!
  cursor: String!
}

enum MetricOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type MetricPreviousValues {
  id: ID!
  name: String!
}

type MetricSubscriptionPayload {
  mutation: MutationType!
  node: Metric
  updatedFields: [String!]
  previousValues: MetricPreviousValues
}

input MetricSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MetricWhereInput
  AND: [MetricSubscriptionWhereInput!]
  OR: [MetricSubscriptionWhereInput!]
  NOT: [MetricSubscriptionWhereInput!]
}

input MetricUpdateInput {
  name: String
  dataPoints: DataPointUpdateManyWithoutMetricInput
}

input MetricUpdateManyMutationInput {
  name: String
}

input MetricUpdateOneRequiredWithoutDataPointsInput {
  create: MetricCreateWithoutDataPointsInput
  update: MetricUpdateWithoutDataPointsDataInput
  upsert: MetricUpsertWithoutDataPointsInput
  connect: MetricWhereUniqueInput
}

input MetricUpdateWithoutDataPointsDataInput {
  name: String
}

input MetricUpsertWithoutDataPointsInput {
  update: MetricUpdateWithoutDataPointsDataInput!
  create: MetricCreateWithoutDataPointsInput!
}

input MetricWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  dataPoints_every: DataPointWhereInput
  dataPoints_some: DataPointWhereInput
  dataPoints_none: DataPointWhereInput
  AND: [MetricWhereInput!]
  OR: [MetricWhereInput!]
  NOT: [MetricWhereInput!]
}

input MetricWhereUniqueInput {
  id: ID
}

type Mutation {
  createDataPoint(data: DataPointCreateInput!): DataPoint!
  updateDataPoint(data: DataPointUpdateInput!, where: DataPointWhereUniqueInput!): DataPoint
  updateManyDataPoints(data: DataPointUpdateManyMutationInput!, where: DataPointWhereInput): BatchPayload!
  upsertDataPoint(where: DataPointWhereUniqueInput!, create: DataPointCreateInput!, update: DataPointUpdateInput!): DataPoint!
  deleteDataPoint(where: DataPointWhereUniqueInput!): DataPoint
  deleteManyDataPoints(where: DataPointWhereInput): BatchPayload!
  createMetric(data: MetricCreateInput!): Metric!
  updateMetric(data: MetricUpdateInput!, where: MetricWhereUniqueInput!): Metric
  updateManyMetrics(data: MetricUpdateManyMutationInput!, where: MetricWhereInput): BatchPayload!
  upsertMetric(where: MetricWhereUniqueInput!, create: MetricCreateInput!, update: MetricUpdateInput!): Metric!
  deleteMetric(where: MetricWhereUniqueInput!): Metric
  deleteManyMetrics(where: MetricWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  dataPoint(where: DataPointWhereUniqueInput!): DataPoint
  dataPoints(where: DataPointWhereInput, orderBy: DataPointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DataPoint]!
  dataPointsConnection(where: DataPointWhereInput, orderBy: DataPointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DataPointConnection!
  metric(where: MetricWhereUniqueInput!): Metric
  metrics(where: MetricWhereInput, orderBy: MetricOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Metric]!
  metricsConnection(where: MetricWhereInput, orderBy: MetricOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MetricConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  dataPoint(where: DataPointSubscriptionWhereInput): DataPointSubscriptionPayload
  metric(where: MetricSubscriptionWhereInput): MetricSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
}

input UserUpdateManyMutationInput {
  name: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`